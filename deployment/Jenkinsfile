pipeline {
    agent any
    
    parameters {
        string(name: 'IMAGE_TAG', defaultValue: 'latest', description: 'Image tag to deploy')
    }
    
    environment {
        AWS_ACCOUNT_ID = credentials('aws-account-id')
        EKS_CLUSTER = 'cicd-pipeline-cluster'
        AWS_REGION = 'us-east-1'
        NAMESPACE = 'sd5055-msa'
    }
    
    stages {
        stage('Configure kubectl') {
            steps {
                echo "Configuring kubectl for EKS cluster: ${EKS_CLUSTER}"
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh """
                        export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                        export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                        export AWS_DEFAULT_REGION=${AWS_REGION}
                        
                        aws eks update-kubeconfig \
                            --region ${AWS_REGION} \
                            --name ${EKS_CLUSTER}
                        
                        echo "kubectl configured"
                        kubectl cluster-info
                    """
                }
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                echo "Deploying with image tag: ${params.IMAGE_TAG}"
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh """
                        export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                        export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                        export AWS_DEFAULT_REGION=${AWS_REGION}
                        
                        # Apply deployment with substitutions
                        sed "s/YOUR_ACCOUNT_ID/${AWS_ACCOUNT_ID}/g" deployment/app.yaml | \
                        sed "s/:latest/:${params.IMAGE_TAG}/g" | \
                        kubectl apply -f -
                        
                        echo "Resources applied"
                    """
                }
            }
        }

                stage('Wait for Rollout') {
            steps {
                echo "Waiting for deployments to complete..."
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh """
                        export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                        export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                        export AWS_DEFAULT_REGION=${AWS_REGION}
                        
                        kubectl rollout status deployment/backend -n ${NAMESPACE} --timeout=300s
                        kubectl rollout status deployment/frontend -n ${NAMESPACE} --timeout=300s
                        
                        echo "Rollout complete"
                    """
                }
            }
        }
        
        stage('Verify') {
            steps {
                echo "Deployment complete! Getting status..."
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh """
                        export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                        export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                        export AWS_DEFAULT_REGION=${AWS_REGION}
                        
                        echo "Pods:"
                        kubectl get pods -n ${NAMESPACE}
                        
                        echo ""
                        echo "Services:"
                        kubectl get svc -n ${NAMESPACE}
                        
                        echo ""
                        echo "Getting frontend URL..."
                        sleep 10
                        FRONTEND_URL=\$(kubectl get svc frontend -n ${NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
                        
                        if [ -n "\$FRONTEND_URL" ]; then
                            echo "======================================"
                            echo "Frontend URL: http://\$FRONTEND_URL"
                            echo "======================================"
                        else
                            echo "LoadBalancer URL not ready yet"
                        fi
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo "Deployment successful!"
            echo "Image Tag: ${params.IMAGE_TAG}"
        }
        failure {
            echo "Deployment failed!"
        }
    }
}